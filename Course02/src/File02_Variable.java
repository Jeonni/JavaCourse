
public class File02_Variable {

	public static void main(String[] args) {
		/*
		 *  변수 (Variable)
		 *  	사전적 의미 : 변할 수 있는 수
		 *  	프로그램을 만드는 데에 있어서 '데이터를 다루는 것'은 필수적인 요소이다.
		 *  		▶ 데이터를 다루는 가장 기본적인 방법 : 변수
		 *  
		 *  변수
		 *  	데이터의 이름, 데이터를 저장하기 위한 저장 공간의 이름
		 *  	컴퓨터는 연산/처리 된 결과 값이나 사용자로부터 입력받은 값 등을 스스로 기억하지 않는다.
		 *  	따라서 데이터를 다루기 위해서 별도로 저장을 해줘야 한다.
		 *  		▶ 저장되는 공간 : JVM의 메모리 공간
		 *  		▶ JVM의 메모리 공간에서 데이터를 찾기 위해 사용되는 식별자 : 변수
		 *  
		 *  변수를 사용하려면 '변수를 사용하겠다.' 라는 선언문이 필요하다.
		 *  
		 *  선언 방법
		 *   	▶ (DataType) VariableName;
		 *   
		 *   	정수형을 저장하기 위한 변수를 선언
		 *   	▷ int number;
		 *   
		 *   	나이를 저장하기 위한 변수를 선언
		 *   	▷ int age;
		 *   	
		 *  	이 때, 변수의 이름은 데이터의 의미 또는 사용 목적에 맞는 이름으로 작성
		 */
		
		// 나이를 저장하기 위한 변수를 작성
		int age;
		
		// 문자열 선언 시,  String 타입으로 작성하여 선언할 수 있다.
		String ageStr; 
		
		// 이름을 저장하기 위한 변수를 선언 (사용 목적에 맞게 사용)
		String name;
		
		// 변수에 데이터를 대입 (저장)
		//	▶ Variable(변수) = Expression(표현);
		
		// name 변수에 문자열로 된 이름을 저장
		name = "Jeonni";
		
		// age 변수에 정수로 된 나이를 저장
		age = 20 + 2;
		
		//	▷ '=' 연산자 뒤의 모든 연산을 한 결과 값을 변수에 대입
		//	▷ age = 22;
		//	▷ age 변수에 22 정수 값이 저장된다.
		
		// 변수에 저장된 데이터를 사용하기
		//	 ▶ 변수 이름을 작성해서 사용
		System.out.println(age);
		//	 ▷ JVM이 변수의 이름을 그대로 출력하는 것이 아니라
		//		메모리 공간에 사용되는 변수 이름으로 인식하기 때문에
		//		변수의 저장공간에 저장된 데이터를 가져온다.
		//	 ▶ System.out.println(22);
		
		// 변수에 저장된 값을 수정하게 되면 이후에 수행되는 코드에서만 수정된 값을 사용한다.
		// 즉, 이전에 수행된 코드에는 영향이 없다.
		System.out.println(age);
		age = 20;
		System.out.println(age);
		
		// 변수의 초기화 (Initialization)
		//	▷ 변수를 선언함과 동시에 데이터를 대입
		//	int num;
		//	num = 10;
		
		//	▷ 정수형 변수 num을 선언함과 동시에 10을 대입
		int num = 10; 
		System.out.println(num);
		
		//	변수의 이름을 작성할 시
		//	▷ 첫 글자는 소문자, 이후 단어의 첫 글자는 대문자로 작성
		//		Example) int myAge;
		
		//	클래스의 이름을 작성할 시
		//	▷ 첫 단어의 첫 글자만 대문자로 작성
		//		Example) JavaCourse.java
	}

}


public class File01_Literal {

	public static void main(String[] args) {
		/*
		 *  리터럴 (Literal)
		 *    프로그램에서 연산/처리를 통한 값이 아닌 코드 상에 직접 표현된 값
		 *    
		 *   실수 리터럴
		 *    실수 타입 리터럴은 double 형으로 컴파일
		 *    float 타입 리터럴은 숫자 뒤에 F나 f를 붙여서 사용
		 *    
		 *   문자 리터럴
		 *    문자 하나를 의미하는 값
		 *    작은 따옴표 (' ')로 하나의 문자를 표현
		 *    자바에서는 '유니코드'를 지원
		 *     ▷ 한글이 가능. '\u0000'
		 *     
		 *     아스키 코드 또한 지원하기 때문에 정수 값으로도 문자를 표현할 수 있다.
		 *     A : 65, a : 97
		 *     
		 *     자바 내에서 문자 또는 문자열로 표현하기 힘든 문자를 사용할 수 있도록 기능을 제공해주는 문자
		 *      ▶ 이스케이프 문자 (Escape Character)
		 *       Example)  인용 부호, 개행 문자 등
		 *        이스케이프 문자는 백슬래시 (\)로 시작한다.
		 *  	개행 문자 : \n
		 *  	탭 문자 : \t
		 *  	큰 따옴표 : \"
		 *  	작은 따옴표 : \'
		 *  	백슬래시 : \\
		 *  
		 *  논리 리터럴
		 *   논리 리터럴은 true, false 두 개 뿐이다.
		 *   
		 *  문자열 리터럴
		 *   큰 따옴표로 표현된 데이터
		 *   문자열 리터럴 String 클래스의 객체로 자동으로 처리된다.
		 *   
		 *  null 리터럴
		 *   기본 자료형에서는 사용이 불가능하고 참조 변수에서만 대입이 가능한 값
		 *   '아무것도 참조하고 있지 않다.' 라는 의미의 값
		 *   
		 *  상수(Constant)
		 *   값이 바뀔 수 없는 수
		 *   일반 변수 선언할 때 final 키워드와 함께 초기화를 한다.
		 *   초기화 이후에 초기화된 값을 수정할 수 없다.
		 *   주로 프로그램이 끝날 때까지 바뀌어선 안되는 값들에 사용
		 *   
		 */	
		
		// 문자 리터럴
		// System.out.println('\u0000');
		
		char ch = 97;
		System.out.println(ch);
		System.out.println("Hello \"Java\" !!");
		
		// ==========================================================
		// 상수
		//  상수는 일반 변수와 구분되기 때문에 모든 문자를 대문자로 작성한다.
		final double PI = 3.141592;
		
		// 초기화 이후에 값을 수정할 수 없다.
		// PI = 3.1;
		System.out.println(Integer.MAX_VALUE);

	}

}
